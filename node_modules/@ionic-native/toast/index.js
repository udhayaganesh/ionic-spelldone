var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var ToastOriginal = /** @class */ (function (_super) {
    __extends(ToastOriginal, _super);
    function ToastOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToastOriginal.prototype.show = function (message, duration, position) { return cordova(this, "show", { "observable": true, "clearFunction": "hide" }, arguments); };
    ToastOriginal.prototype.hide = function () { return cordova(this, "hide", {}, arguments); };
    ToastOriginal.prototype.showWithOptions = function (options) { return cordova(this, "showWithOptions", { "observable": true, "clearFunction": "hide" }, arguments); };
    ToastOriginal.prototype.showShortTop = function (message) { return cordova(this, "showShortTop", { "observable": true, "clearFunction": "hide" }, arguments); };
    ToastOriginal.prototype.showShortCenter = function (message) { return cordova(this, "showShortCenter", { "observable": true, "clearFunction": "hide" }, arguments); };
    ToastOriginal.prototype.showShortBottom = function (message) { return cordova(this, "showShortBottom", { "observable": true, "clearFunction": "hide" }, arguments); };
    ToastOriginal.prototype.showLongTop = function (message) { return cordova(this, "showLongTop", { "observable": true, "clearFunction": "hide" }, arguments); };
    ToastOriginal.prototype.showLongCenter = function (message) { return cordova(this, "showLongCenter", { "observable": true, "clearFunction": "hide" }, arguments); };
    ToastOriginal.prototype.showLongBottom = function (message) { return cordova(this, "showLongBottom", { "observable": true, "clearFunction": "hide" }, arguments); };
    ToastOriginal.pluginName = "Toast";
    ToastOriginal.plugin = "cordova-plugin-x-toast";
    ToastOriginal.pluginRef = "plugins.toast";
    ToastOriginal.repo = "https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin";
    ToastOriginal.platforms = ["Android", "BlackBerry 10", "iOS", "Windows", "Windows Phone 8"];
    return ToastOriginal;
}(IonicNativePlugin));
var Toast = new ToastOriginal();
export { Toast };
//# sourceMappingURL=data:application/json;base64,